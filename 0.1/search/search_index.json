{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "Element Lab for storing lab information \u00b6 DataJoint Element for lab metadata. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. element-lab features a DataJoint pipeline design for lab related information, such as Lab, User, Project, Protocol, Source. element-lab is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-lab can be flexibly attached to any DataJoint workflow.", "title": "Element Lab"}, {"location": "#element-lab-for-storing-lab-information", "text": "DataJoint Element for lab metadata. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. element-lab features a DataJoint pipeline design for lab related information, such as Lab, User, Project, Protocol, Source. element-lab is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-lab can be flexibly attached to any DataJoint workflow.", "title": "Element Lab for storing lab information"}, {"location": "changelog/", "text": "Changelog \u00b6 Observes Semantic Versioning standard and Keep a Changelog convention. 0.1.2 - 2022-10-17 \u00b6 Updated \u00b6 CICD for triggering PyPI release 0.1.1 - 2022-05-10 \u00b6 Added \u00b6 Adopted black formatting into code base 0.1.0b1 - 2022-01-28 \u00b6 Added \u00b6 Added functions to generate dictionaries for NWB export. 0.1.0b0 - 2021-05-07 \u00b6 Added \u00b6 First beta release 0.1.0a1 - 2021-04-30 \u00b6 Added \u00b6 Added GitHub Action release process Added lab schema", "title": "Changelog"}, {"location": "changelog/#changelog", "text": "Observes Semantic Versioning standard and Keep a Changelog convention.", "title": "Changelog"}, {"location": "changelog/#012-2022-10-17", "text": "", "title": "0.1.2 - 2022-10-17"}, {"location": "changelog/#updated", "text": "CICD for triggering PyPI release", "title": "Updated"}, {"location": "changelog/#011-2022-05-10", "text": "", "title": "0.1.1 - 2022-05-10"}, {"location": "changelog/#added", "text": "Adopted black formatting into code base", "title": "Added"}, {"location": "changelog/#010b1-2022-01-28", "text": "", "title": "0.1.0b1 - 2022-01-28"}, {"location": "changelog/#added_1", "text": "Added functions to generate dictionaries for NWB export.", "title": "Added"}, {"location": "changelog/#010b0-2021-05-07", "text": "", "title": "0.1.0b0 - 2021-05-07"}, {"location": "changelog/#added_2", "text": "First beta release", "title": "Added"}, {"location": "changelog/#010a1-2021-04-30", "text": "", "title": "0.1.0a1 - 2021-04-30"}, {"location": "changelog/#added_3", "text": "Added GitHub Action release process Added lab schema", "title": "Added"}, {"location": "citation/", "text": "Citation \u00b6 If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Lab (version 0.1.2)", "title": "Citation"}, {"location": "citation/#citation", "text": "If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Lab (version 0.1.2)", "title": "Citation"}, {"location": "concepts/", "text": "Concepts \u00b6 Storage of high-level information about a laboratory \u00b6 Most pipelines track some information about the lab, including the facilities, experiment rigs, and users. This can help track which users lab members are associated with which projects or who is responsible for equipment. Through our interviews and direct collaboration on the precursor projects, we identified the common motifs in the lab schemas. This Element works for diverse downstream pipelines and is always used in combination with other Elements for specific experiments. As such, it is validated jointly with the acquisition Elements such as Extracellular Array Electrophysiology and Calcium Imaging . Key Partnerships \u00b6 Over the several years, many labs have developed DataJoint-based pipelines for lab management. The DataJoint team collaborated with several and interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: International Brain Laboratory BrainCoGs (Princeton Neuroscience Institute), Python pipeline, MATLAB pipeline MoC3 (Columbia Zuckerman Institute) Churchland Lab Costa Lab (private repository) Hillman Lab Element architecture \u00b6 lab schema ( API docs ) \u00b6 Table Description Lab Table for storing general lab info. Location Location of research (e.g., animal housing or experimental rigs) UserRole Roles assigned to a user or a job title. User Table for storing user information. LabMembership Store lab membership information using three lookup tables. ProtocolType Type of protocol or issuing agency. Protocol Protocol specifics (e.g., protocol number and title). Project Projects within a lab. ProjectKeywords Project keywords or meta-information. ProjectPublication Project's resulting publications. ProjectSourceCode URL to source code for replication. ProjectUser Users participating in the project. Source Source or supplier of subject animals.", "title": "Concepts"}, {"location": "concepts/#concepts", "text": "", "title": "Concepts"}, {"location": "concepts/#storage-of-high-level-information-about-a-laboratory", "text": "Most pipelines track some information about the lab, including the facilities, experiment rigs, and users. This can help track which users lab members are associated with which projects or who is responsible for equipment. Through our interviews and direct collaboration on the precursor projects, we identified the common motifs in the lab schemas. This Element works for diverse downstream pipelines and is always used in combination with other Elements for specific experiments. As such, it is validated jointly with the acquisition Elements such as Extracellular Array Electrophysiology and Calcium Imaging .", "title": "Storage of high-level information about a laboratory"}, {"location": "concepts/#key-partnerships", "text": "Over the several years, many labs have developed DataJoint-based pipelines for lab management. The DataJoint team collaborated with several and interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: International Brain Laboratory BrainCoGs (Princeton Neuroscience Institute), Python pipeline, MATLAB pipeline MoC3 (Columbia Zuckerman Institute) Churchland Lab Costa Lab (private repository) Hillman Lab", "title": "Key Partnerships"}, {"location": "concepts/#element-architecture", "text": "", "title": "Element architecture"}, {"location": "concepts/#lab-schema-api-docs", "text": "Table Description Lab Table for storing general lab info. Location Location of research (e.g., animal housing or experimental rigs) UserRole Roles assigned to a user or a job title. User Table for storing user information. LabMembership Store lab membership information using three lookup tables. ProtocolType Type of protocol or issuing agency. Protocol Protocol specifics (e.g., protocol number and title). Project Projects within a lab. ProjectKeywords Project keywords or meta-information. ProjectPublication Project's resulting publications. ProjectSourceCode URL to source code for replication. ProjectUser Users participating in the project. Source Source or supplier of subject animals.", "title": "lab schema (API docs)"}, {"location": "tutorials/", "text": "Tutorials \u00b6 Coming soon!", "title": "Tutorials"}, {"location": "tutorials/#tutorials", "text": "Coming soon!", "title": "Tutorials"}, {"location": "api/element_lab/lab/", "text": "activate ( schema_name , create_schema = True , create_tables = True ) \u00b6 Activate this schema Parameters: Name Type Description Default schema_name str schema name on the database server to activate the lab element required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables bool when True (default), create schema tables in the database if they do not yet exist. True Source code in element_lab/lab.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def activate ( schema_name : str , create_schema : bool = True , create_tables : bool = True ): \"\"\"Activate this schema Args: schema_name (str): schema name on the database server to activate the `lab` element create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (bool): when True (default), create schema tables in the database if they do not yet exist. \"\"\" schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables ) Lab \u00b6 Bases: dj . Lookup Table for storing general lab info. Attributes: Name Type Description lab varchar(24) Abbreviated lab name. lab_name varchar(255) Full lab name. institution varchar(255) Name of the affiliation institution. address varchar(255) Physical lab address. time_zone varchar(64) If using NWB export, use 'UTC\u00b1X' format Source code in element_lab/lab.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @schema class Lab ( dj . Lookup ): \"\"\"Table for storing general lab info. Attributes: lab ( varchar(24) ): Abbreviated lab name. lab_name ( varchar(255) ): Full lab name. institution ( varchar(255) ): Name of the affiliation institution. address ( varchar(255) ): Physical lab address. time_zone ( varchar(64) ): If using NWB export, use 'UTC\u00b1X' format \"\"\" definition = \"\"\" lab : varchar(24) # abbreviated lab name --- lab_name : varchar(255) # full lab name institution : varchar(255) address : varchar(255) time_zone : varchar(64) # 'UTC\u00b1X' format for NWB export \"\"\" Location \u00b6 Bases: dj . Lookup Location of research (e.g., animal housing or experimental rigs) Attributes: Name Type Description Lab foreign key Lab key. location varchar(32) Location of a space related to the lab. location_description varchar(255), optional Description of the location. Source code in element_lab/lab.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @schema class Location ( dj . Lookup ): \"\"\"Location of research (e.g., animal housing or experimental rigs) Attributes: Lab (foreign key): Lab key. location ( varchar(32) ): Location of a space related to the lab. location_description ( varchar(255), optional ): Description of the location. \"\"\" definition = \"\"\" # location of research (e.g., animal housing or experimental rigs) -> Lab location : varchar(32) --- location_description='' : varchar(255) \"\"\" UserRole \u00b6 Bases: dj . Lookup Roles assigned to a user or a job title. Attributes: Name Type Description user_role varchar(16) Role within the lab (e.g., PI, Postdoc, etc.). Source code in element_lab/lab.py 63 64 65 66 67 68 69 70 71 72 73 @schema class UserRole ( dj . Lookup ): \"\"\"Roles assigned to a user or a job title. Attributes: user_role ( varchar(16) ): Role within the lab (e.g., PI, Postdoc, etc.). \"\"\" definition = \"\"\" user_role : varchar(16) # Role within the lab (e.g., PI, Postdoc, etc.) \"\"\" User \u00b6 Bases: dj . Lookup Table for storing user information. Attributes: Name Type Description user varchar(32) User name. user_email varchar(128) User email address. user_cellphone varchar(32) User cellphone number. Source code in element_lab/lab.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 @schema class User ( dj . Lookup ): \"\"\"Table for storing user information. Attributes: user ( varchar(32) ): User name. user_email ( varchar(128) ): User email address. user_cellphone ( varchar(32) ): User cellphone number. \"\"\" definition = \"\"\" user : varchar(32) --- user_email='' : varchar(128) user_cellphone='' : varchar(32) \"\"\" LabMembership \u00b6 Bases: dj . Lookup Store lab membership information using three lookup tables. Attributes: Name Type Description Lab foreign key Lab key. User foreign key User key. UserRole foreign key Optional. UserRole primary key. Source code in element_lab/lab.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @schema class LabMembership ( dj . Lookup ): \"\"\"Store lab membership information using three lookup tables. Attributes: Lab (foreign key): Lab key. User (foreign key): User key. UserRole (foreign key): Optional. UserRole primary key. \"\"\" definition = \"\"\" -> Lab -> User --- -> [nullable] UserRole \"\"\" ProtocolType \u00b6 Bases: dj . Lookup Type of protocol or issuing agency. Attributes: Name Type Description protocol_type varchar(32) Protocol types (e.g., IACUC, IRB, etc.). Source code in element_lab/lab.py 112 113 114 115 116 117 118 119 120 121 122 @schema class ProtocolType ( dj . Lookup ): \"\"\"Type of protocol or issuing agency. Attributes: protocol_type ( varchar(32) ): Protocol types (e.g., IACUC, IRB, etc.). \"\"\" definition = \"\"\" protocol_type : varchar(32) \"\"\" Protocol \u00b6 Bases: dj . Lookup Protocol specifics (e.g., protocol number and title). Attributes: Name Type Description protocol varchar(16) Protocol identifier. ProtocolType foreign key ProtocolType key. protocol_description( varchar (255) Optional. Description of the protocol. Source code in element_lab/lab.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @schema class Protocol ( dj . Lookup ): \"\"\"Protocol specifics (e.g., protocol number and title). Attributes: protocol ( varchar(16) ): Protocol identifier. ProtocolType (foreign key): ProtocolType key. protocol_description( varchar(255) ): Optional. Description of the protocol. \"\"\" definition = \"\"\" protocol : varchar(16) --- -> ProtocolType protocol_description='' : varchar(255) \"\"\" Project \u00b6 Bases: dj . Lookup Projects within a lab. Attributes: Name Type Description project varchar(32) Project identifier. project_description varchar(1024) Description about the project. Source code in element_lab/lab.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 @schema class Project ( dj . Lookup ): \"\"\"Projects within a lab. Attributes: project ( varchar(32) ): Project identifier. project_description ( varchar(1024) ): Description about the project. \"\"\" definition = \"\"\" project : varchar(32) --- project_description='' : varchar(1024) \"\"\" ProjectKeywords \u00b6 Bases: dj . Manual Project keywords or meta-information. Attributes: Name Type Description Project foreign key Project key. keyword varchar(32) Descriptive keyword about the project. Source code in element_lab/lab.py 159 160 161 162 163 164 165 166 167 168 169 170 171 @schema class ProjectKeywords ( dj . Manual ): \"\"\"Project keywords or meta-information. Attributes: Project (foreign key): Project key. keyword ( varchar(32) ): Descriptive keyword about the project. \"\"\" definition = \"\"\" -> Project keyword: varchar(32) \"\"\" ProjectPublication \u00b6 Bases: dj . Manual Project's resulting publications. Attributes: Name Type Description Project foreign key Project key. publication varchar(256) Name of the published paper. Source code in element_lab/lab.py 174 175 176 177 178 179 180 181 182 183 184 185 186 @schema class ProjectPublication ( dj . Manual ): \"\"\"Project's resulting publications. Attributes: Project (foreign key): Project key. publication ( varchar(256) ): Name of the published paper. \"\"\" definition = \"\"\" -> Project publication: varchar(256) \"\"\" ProjectSourceCode \u00b6 Bases: dj . Manual URL to source code for replication. Attributes: Name Type Description Project foreign key Project key. repository_url varchar(256) URL to the code repository. repository_name varchar(32) Name of the repository. Source code in element_lab/lab.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 @schema class ProjectSourceCode ( dj . Manual ): \"\"\"URL to source code for replication. Attributes: Project (foreign key): Project key. repository_url ( varchar(256) ): URL to the code repository. repository_name ( varchar(32) ): Name of the repository. \"\"\" definition = \"\"\" -> Project repository_url : varchar(256) --- repository_name='' : varchar(32) \"\"\" ProjectUser \u00b6 Bases: dj . Manual Users participating in the project. Attributes: Name Type Description Project foreign key Project key. User foreign key User key. Source code in element_lab/lab.py 207 208 209 210 211 212 213 214 215 216 217 218 219 @schema class ProjectUser ( dj . Manual ): \"\"\"Users participating in the project. Attributes: Project (foreign key): Project key. User (foreign key): User key. \"\"\" definition = \"\"\" -> Project -> User \"\"\" Source \u00b6 Bases: dj . Lookup Source or supplier of subject animals. Attributes: Name Type Description source varchar(32) Abbreviated source name. source_name varchar(255) Source name. contact_details varchar(255) Optional. Phone number and/or email. source_description varchar(255) Optional. Description of the source. Source code in element_lab/lab.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 @schema class Source ( dj . Lookup ): \"\"\"Source or supplier of subject animals. Attributes: source ( varchar(32) ): Abbreviated source name. source_name ( varchar(255) ): Source name. contact_details ( varchar(255) ): Optional. Phone number and/or email. source_description ( varchar(255) ): Optional. Description of the source. \"\"\" definition = \"\"\" source : varchar(32) # abbreviated source name --- source_name : varchar(255) contact_details='' : varchar(255) source_description='' : varchar(255) \"\"\"", "title": "lab.py"}, {"location": "api/element_lab/lab/#element_lab.lab.activate", "text": "Activate this schema Parameters: Name Type Description Default schema_name str schema name on the database server to activate the lab element required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables bool when True (default), create schema tables in the database if they do not yet exist. True Source code in element_lab/lab.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def activate ( schema_name : str , create_schema : bool = True , create_tables : bool = True ): \"\"\"Activate this schema Args: schema_name (str): schema name on the database server to activate the `lab` element create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (bool): when True (default), create schema tables in the database if they do not yet exist. \"\"\" schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables )", "title": "activate()"}, {"location": "api/element_lab/lab/#element_lab.lab.Lab", "text": "Bases: dj . Lookup Table for storing general lab info. Attributes: Name Type Description lab varchar(24) Abbreviated lab name. lab_name varchar(255) Full lab name. institution varchar(255) Name of the affiliation institution. address varchar(255) Physical lab address. time_zone varchar(64) If using NWB export, use 'UTC\u00b1X' format Source code in element_lab/lab.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @schema class Lab ( dj . Lookup ): \"\"\"Table for storing general lab info. Attributes: lab ( varchar(24) ): Abbreviated lab name. lab_name ( varchar(255) ): Full lab name. institution ( varchar(255) ): Name of the affiliation institution. address ( varchar(255) ): Physical lab address. time_zone ( varchar(64) ): If using NWB export, use 'UTC\u00b1X' format \"\"\" definition = \"\"\" lab : varchar(24) # abbreviated lab name --- lab_name : varchar(255) # full lab name institution : varchar(255) address : varchar(255) time_zone : varchar(64) # 'UTC\u00b1X' format for NWB export \"\"\"", "title": "Lab"}, {"location": "api/element_lab/lab/#element_lab.lab.Location", "text": "Bases: dj . Lookup Location of research (e.g., animal housing or experimental rigs) Attributes: Name Type Description Lab foreign key Lab key. location varchar(32) Location of a space related to the lab. location_description varchar(255), optional Description of the location. Source code in element_lab/lab.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @schema class Location ( dj . Lookup ): \"\"\"Location of research (e.g., animal housing or experimental rigs) Attributes: Lab (foreign key): Lab key. location ( varchar(32) ): Location of a space related to the lab. location_description ( varchar(255), optional ): Description of the location. \"\"\" definition = \"\"\" # location of research (e.g., animal housing or experimental rigs) -> Lab location : varchar(32) --- location_description='' : varchar(255) \"\"\"", "title": "Location"}, {"location": "api/element_lab/lab/#element_lab.lab.UserRole", "text": "Bases: dj . Lookup Roles assigned to a user or a job title. Attributes: Name Type Description user_role varchar(16) Role within the lab (e.g., PI, Postdoc, etc.). Source code in element_lab/lab.py 63 64 65 66 67 68 69 70 71 72 73 @schema class UserRole ( dj . Lookup ): \"\"\"Roles assigned to a user or a job title. Attributes: user_role ( varchar(16) ): Role within the lab (e.g., PI, Postdoc, etc.). \"\"\" definition = \"\"\" user_role : varchar(16) # Role within the lab (e.g., PI, Postdoc, etc.) \"\"\"", "title": "UserRole"}, {"location": "api/element_lab/lab/#element_lab.lab.User", "text": "Bases: dj . Lookup Table for storing user information. Attributes: Name Type Description user varchar(32) User name. user_email varchar(128) User email address. user_cellphone varchar(32) User cellphone number. Source code in element_lab/lab.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 @schema class User ( dj . Lookup ): \"\"\"Table for storing user information. Attributes: user ( varchar(32) ): User name. user_email ( varchar(128) ): User email address. user_cellphone ( varchar(32) ): User cellphone number. \"\"\" definition = \"\"\" user : varchar(32) --- user_email='' : varchar(128) user_cellphone='' : varchar(32) \"\"\"", "title": "User"}, {"location": "api/element_lab/lab/#element_lab.lab.LabMembership", "text": "Bases: dj . Lookup Store lab membership information using three lookup tables. Attributes: Name Type Description Lab foreign key Lab key. User foreign key User key. UserRole foreign key Optional. UserRole primary key. Source code in element_lab/lab.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @schema class LabMembership ( dj . Lookup ): \"\"\"Store lab membership information using three lookup tables. Attributes: Lab (foreign key): Lab key. User (foreign key): User key. UserRole (foreign key): Optional. UserRole primary key. \"\"\" definition = \"\"\" -> Lab -> User --- -> [nullable] UserRole \"\"\"", "title": "LabMembership"}, {"location": "api/element_lab/lab/#element_lab.lab.ProtocolType", "text": "Bases: dj . Lookup Type of protocol or issuing agency. Attributes: Name Type Description protocol_type varchar(32) Protocol types (e.g., IACUC, IRB, etc.). Source code in element_lab/lab.py 112 113 114 115 116 117 118 119 120 121 122 @schema class ProtocolType ( dj . Lookup ): \"\"\"Type of protocol or issuing agency. Attributes: protocol_type ( varchar(32) ): Protocol types (e.g., IACUC, IRB, etc.). \"\"\" definition = \"\"\" protocol_type : varchar(32) \"\"\"", "title": "ProtocolType"}, {"location": "api/element_lab/lab/#element_lab.lab.Protocol", "text": "Bases: dj . Lookup Protocol specifics (e.g., protocol number and title). Attributes: Name Type Description protocol varchar(16) Protocol identifier. ProtocolType foreign key ProtocolType key. protocol_description( varchar (255) Optional. Description of the protocol. Source code in element_lab/lab.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @schema class Protocol ( dj . Lookup ): \"\"\"Protocol specifics (e.g., protocol number and title). Attributes: protocol ( varchar(16) ): Protocol identifier. ProtocolType (foreign key): ProtocolType key. protocol_description( varchar(255) ): Optional. Description of the protocol. \"\"\" definition = \"\"\" protocol : varchar(16) --- -> ProtocolType protocol_description='' : varchar(255) \"\"\"", "title": "Protocol"}, {"location": "api/element_lab/lab/#element_lab.lab.Project", "text": "Bases: dj . Lookup Projects within a lab. Attributes: Name Type Description project varchar(32) Project identifier. project_description varchar(1024) Description about the project. Source code in element_lab/lab.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 @schema class Project ( dj . Lookup ): \"\"\"Projects within a lab. Attributes: project ( varchar(32) ): Project identifier. project_description ( varchar(1024) ): Description about the project. \"\"\" definition = \"\"\" project : varchar(32) --- project_description='' : varchar(1024) \"\"\"", "title": "Project"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectKeywords", "text": "Bases: dj . Manual Project keywords or meta-information. Attributes: Name Type Description Project foreign key Project key. keyword varchar(32) Descriptive keyword about the project. Source code in element_lab/lab.py 159 160 161 162 163 164 165 166 167 168 169 170 171 @schema class ProjectKeywords ( dj . Manual ): \"\"\"Project keywords or meta-information. Attributes: Project (foreign key): Project key. keyword ( varchar(32) ): Descriptive keyword about the project. \"\"\" definition = \"\"\" -> Project keyword: varchar(32) \"\"\"", "title": "ProjectKeywords"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectPublication", "text": "Bases: dj . Manual Project's resulting publications. Attributes: Name Type Description Project foreign key Project key. publication varchar(256) Name of the published paper. Source code in element_lab/lab.py 174 175 176 177 178 179 180 181 182 183 184 185 186 @schema class ProjectPublication ( dj . Manual ): \"\"\"Project's resulting publications. Attributes: Project (foreign key): Project key. publication ( varchar(256) ): Name of the published paper. \"\"\" definition = \"\"\" -> Project publication: varchar(256) \"\"\"", "title": "ProjectPublication"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectSourceCode", "text": "Bases: dj . Manual URL to source code for replication. Attributes: Name Type Description Project foreign key Project key. repository_url varchar(256) URL to the code repository. repository_name varchar(32) Name of the repository. Source code in element_lab/lab.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 @schema class ProjectSourceCode ( dj . Manual ): \"\"\"URL to source code for replication. Attributes: Project (foreign key): Project key. repository_url ( varchar(256) ): URL to the code repository. repository_name ( varchar(32) ): Name of the repository. \"\"\" definition = \"\"\" -> Project repository_url : varchar(256) --- repository_name='' : varchar(32) \"\"\"", "title": "ProjectSourceCode"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectUser", "text": "Bases: dj . Manual Users participating in the project. Attributes: Name Type Description Project foreign key Project key. User foreign key User key. Source code in element_lab/lab.py 207 208 209 210 211 212 213 214 215 216 217 218 219 @schema class ProjectUser ( dj . Manual ): \"\"\"Users participating in the project. Attributes: Project (foreign key): Project key. User (foreign key): User key. \"\"\" definition = \"\"\" -> Project -> User \"\"\"", "title": "ProjectUser"}, {"location": "api/element_lab/lab/#element_lab.lab.Source", "text": "Bases: dj . Lookup Source or supplier of subject animals. Attributes: Name Type Description source varchar(32) Abbreviated source name. source_name varchar(255) Source name. contact_details varchar(255) Optional. Phone number and/or email. source_description varchar(255) Optional. Description of the source. Source code in element_lab/lab.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 @schema class Source ( dj . Lookup ): \"\"\"Source or supplier of subject animals. Attributes: source ( varchar(32) ): Abbreviated source name. source_name ( varchar(255) ): Source name. contact_details ( varchar(255) ): Optional. Phone number and/or email. source_description ( varchar(255) ): Optional. Description of the source. \"\"\" definition = \"\"\" source : varchar(32) # abbreviated source name --- source_name : varchar(255) contact_details='' : varchar(255) source_description='' : varchar(255) \"\"\"", "title": "Source"}, {"location": "api/element_lab/version/", "text": "Package metadata.", "title": "version.py"}, {"location": "api/element_lab/export/nwb/", "text": "element_lab_to_nwb_dict ( lab_key = None , project_key = None , protocol_key = None ) \u00b6 Generate a NWB-compliant dictionary object for lab metadata Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type. Parameters: Name Type Description Default lab_key dict Key specifying one entry in element_lab.lab.Lab None project_key dict Key specifying one entry in element_lab.lab.Project None protocol_key dict Key specifying one entry in element_lab.lab.Protocol None Returns: Name Type Description dict dict Dictionary with NWB parameters. Source code in element_lab/export/nwb.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def element_lab_to_nwb_dict ( lab_key : dict = None , project_key : dict = None , protocol_key : dict = None ) -> dict : \"\"\"Generate a NWB-compliant dictionary object for lab metadata Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type. Args: lab_key (dict, optional): Key specifying one entry in element_lab.lab.Lab project_key (dict, optional): Key specifying one entry in element_lab.lab.Project protocol_key (dict, optional): Key specifying one entry in element_lab.lab.Protocol Returns: dict: Dictionary with NWB parameters. \"\"\" # Validate input assert any ([ lab_key , project_key , protocol_key ]), \"Must specify one key.\" assert ( lab_key is None or len ( lab . Lab & lab_key ) == 1 ), \"Multiple labs error! The lab_key should specify only one lab.\" assert project_key is None or len ( lab . Project & project_key ) == 1 , ( \"Multiple projects error! The project_key should specify only one \" \"project.\" ) assert protocol_key is None or len ( lab . Protocol & protocol_key ) == 1 , ( \"Multiple protocols error! The protocol_key should specify only one \" \"protocol.\" ) element_info = dict () if lab_key : element_info . update ( _lab_to_nwb_dict ( lab_key )) if project_key : element_info . update ( _project_to_nwb_dict ( project_key )) if protocol_key : element_info . update ( _protocol_to_nwb_dict ( protocol_key )) return element_info", "title": "nwb.py"}, {"location": "api/element_lab/export/nwb/#element_lab.export.nwb.element_lab_to_nwb_dict", "text": "Generate a NWB-compliant dictionary object for lab metadata Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type. Parameters: Name Type Description Default lab_key dict Key specifying one entry in element_lab.lab.Lab None project_key dict Key specifying one entry in element_lab.lab.Project None protocol_key dict Key specifying one entry in element_lab.lab.Protocol None Returns: Name Type Description dict dict Dictionary with NWB parameters. Source code in element_lab/export/nwb.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def element_lab_to_nwb_dict ( lab_key : dict = None , project_key : dict = None , protocol_key : dict = None ) -> dict : \"\"\"Generate a NWB-compliant dictionary object for lab metadata Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type. Args: lab_key (dict, optional): Key specifying one entry in element_lab.lab.Lab project_key (dict, optional): Key specifying one entry in element_lab.lab.Project protocol_key (dict, optional): Key specifying one entry in element_lab.lab.Protocol Returns: dict: Dictionary with NWB parameters. \"\"\" # Validate input assert any ([ lab_key , project_key , protocol_key ]), \"Must specify one key.\" assert ( lab_key is None or len ( lab . Lab & lab_key ) == 1 ), \"Multiple labs error! The lab_key should specify only one lab.\" assert project_key is None or len ( lab . Project & project_key ) == 1 , ( \"Multiple projects error! The project_key should specify only one \" \"project.\" ) assert protocol_key is None or len ( lab . Protocol & protocol_key ) == 1 , ( \"Multiple protocols error! The protocol_key should specify only one \" \"protocol.\" ) element_info = dict () if lab_key : element_info . update ( _lab_to_nwb_dict ( lab_key )) if project_key : element_info . update ( _project_to_nwb_dict ( project_key )) if protocol_key : element_info . update ( _protocol_to_nwb_dict ( protocol_key )) return element_info", "title": "element_lab_to_nwb_dict()"}]}
{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Element Lab for storing lab information", "text": "<p>DataJoint Element for lab metadata. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline.</p> <p>This Element ...</p> <ul> <li>features a DataJoint pipeline design for lab related information, such as Lab, User,   Project, Protocol, Source.</li> </ul> <ul> <li>is not a complete workflow by itself, but rather a modular design of tables and   dependencies. </li> </ul> <ul> <li>can be flexibly attached to any DataJoint workflow.</li> </ul> <p>Visit the Concepts page for more information on Element Lab. To get started with building your data pipeline navigate to the Tutorials page.</p>"}, {"location": "changelog/", "title": "Changelog", "text": "<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"}, {"location": "changelog/#030-2023-06-02", "title": "0.3.0 - 2023-06-02", "text": "<ul> <li>Add - <code>Device</code> table to <code>lab</code> schema</li> <li>Update - Docs configuration to remove Google Analytics key and add Markdown extensions</li> </ul>"}, {"location": "changelog/#022-2023-05-11", "title": "0.2.2 - 2023-05-11", "text": "<ul> <li>Fix - <code>.ipynb</code> dark mode output for all notebooks.</li> <li>Fix - Remove <code>GOOGLE_ANALYTICS_KEY</code> from <code>u24_element_release_call.yml</code>.</li> </ul>"}, {"location": "changelog/#021-2023-04-28", "title": "0.2.1 - 2023-04-28", "text": "<ul> <li>Fix - <code>.ipynb</code> output in tutorials is not visible in dark mode.</li> </ul>"}, {"location": "changelog/#020-2022-01-20", "title": "0.2.0 - 2022-01-20", "text": "<ul> <li>Add - <code>project</code> schema for project/study/experiment related tables</li> <li>Add - pre-commit and markdown lint checks</li> </ul>"}, {"location": "changelog/#012-2022-10-17", "title": "0.1.2 - 2022-10-17", "text": "<ul> <li>Update - CICD for triggering PyPI release</li> </ul>"}, {"location": "changelog/#011-2022-05-10", "title": "0.1.1 - 2022-05-10", "text": "<ul> <li>Add - Adopted black formatting into code base</li> </ul>"}, {"location": "changelog/#010b1-2022-01-28", "title": "0.1.0b1 - 2022-01-28", "text": "<ul> <li>Add - Functions to generate dictionaries for NWB export.</li> </ul>"}, {"location": "changelog/#010b0-2021-05-07", "title": "0.1.0b0 - 2021-05-07", "text": "<ul> <li>Add - First beta release</li> </ul>"}, {"location": "changelog/#010a1-2021-04-30", "title": "0.1.0a1 - 2021-04-30", "text": "<ul> <li>Add - GitHub Action release process</li> <li>Add - <code>lab</code> schema</li> </ul>"}, {"location": "citation/", "title": "Citation", "text": "<p>If your work uses this Element, please cite the following manuscript and Research Resource Identifier (RRID).</p> <ul> <li>Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D,   Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for   Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358</li> </ul> <ul> <li>DataJoint Elements (RRID:SCR_021894) -   Element Lab (version 0.3.0)</li> </ul>"}, {"location": "concepts/", "title": "Concepts", "text": ""}, {"location": "concepts/#storage-of-high-level-information-about-a-laboratory", "title": "Storage of high-level information about a laboratory", "text": "<p>Most pipelines track some information about the lab, including the facilities, experiment rigs, and users. This can help track which lab members are associated with which projects or who is responsible for equipment.</p> <p>Through our interviews and direct collaboration on the precursor projects, we identified the common motifs in the lab schemas. This Element works for diverse downstream pipelines and is always used in combination with other Elements for specific experiments. As such, it is validated jointly with the acquisition Elements such as Extracellular Array Electrophysiology and Calcium Imaging.</p>"}, {"location": "concepts/#key-partnerships", "title": "Key Partnerships", "text": "<p>Over the several years, many labs have developed DataJoint-based pipelines for lab management. The DataJoint team collaborated with several and interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: </p> <ul> <li>International Brain Laboratory</li> <li>BrainCoGs (Princeton Neuroscience Institute), Python pipeline, MATLAB pipeline </li> <li>MoC3 (Columbia Zuckerman Institute) </li> <li>Churchland Lab </li> <li>Costa Lab (private repository) </li> <li>Hillman Lab</li> </ul>"}, {"location": "concepts/#element-architecture", "title": "Element architecture", "text": ""}, {"location": "concepts/#lab-schema-api-docs", "title": "<code>lab</code> schema (API docs)", "text": "Table Description Lab Table for storing general lab info. Location Location of research (e.g., animal housing, experimental rigs) UserRole Roles assigned to a user or a job title. User Table for storing user information. LabMembership Store lab membership information using three lookup tables. ProtocolType Type of protocol or issuing agency. Protocol Protocol specifics (e.g., protocol number and title). Project1 Projects within a lab. ProjectKeywords1 Project keywords or meta-information. ProjectPublication1 Project's resulting publications. ProjectSourceCode1 URL to source code for replication. ProjectUser1 Users participating in the project. Source Source or supplier of subject animals."}, {"location": "concepts/#project-schema-api-docs", "title": "<code>project</code> schema (API docs)", "text": "Table Description Project Top-level grouping of studies and experiments to investigate a scientific question. ProjectPersonnel List of individuals involved in a project. ProjectKeywords Project keywords. If the dataset is exported, this metadata is saved within the NWB file. ProjectPublication Project's resulting publications. ProjectSourceCode Web address of source code. Study A set of experiments designed to address a specific aim. Protocol Info about institutional approval (e.g., IACUC, IRB, etc.) Experiment Experimental tasks and their associated lab, study, and protocol. <ol> <li> <p>Depreciation warning. A subset of the tables above will be removed in a future version of this Element in favor of the <code>project</code> schema.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"}, {"location": "tutorials/", "title": "Tutorials", "text": ""}, {"location": "tutorials/#installation", "title": "Installation", "text": "<p>Installation of the Element requires an integrated development environment and database. Instructions to setup each of the components can be found on the User Instructions page. </p>"}, {"location": "tutorials/#element-usage", "title": "Element usage", "text": "<p>Element Lab is a modular design of tables and dependencies that can be flexibly attached to any DataJoint workflow, but it is not a complete workflow by itself.  For example usages of Element Lab and detailed tutorials, see the workflows listed below.</p> <p>- Element Array Ephys -     Docs &amp;     Code repository</p> <p>- Element Calcium Imaging -     Docs     &amp; Code repository</p> <p>- Element DeepLabCut -     Docs &amp;     Code repository</p>"}, {"location": "api/element_lab/lab/", "title": "lab.py", "text": ""}, {"location": "api/element_lab/lab/#element_lab.lab.activate", "title": "<code>activate(schema_name, create_schema=True, create_tables=True)</code>", "text": "<p>Activate this schema</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server to activate the <code>lab</code> element</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it                 does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>bool</code> <p>when True (default), create schema tables in the database                  if they do not yet exist.</p> <code>True</code> Source code in <code>element_lab/lab.py</code> <pre><code>def activate(schema_name: str, create_schema: bool = True, create_tables: bool = True):\n\"\"\"Activate this schema\n\n    Args:\n        schema_name (str): schema name on the database server to activate the `lab` element\n        create_schema (bool): when True (default), create schema in the database if it\n                            does not yet exist.\n        create_tables (bool): when True (default), create schema tables in the database\n                             if they do not yet exist.\n    \"\"\"\n\n    schema.activate(\n        schema_name, create_schema=create_schema, create_tables=create_tables\n    )\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Organization", "title": "<code>Organization</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Top-level list of all organizations involved in any of the projects.</p> <p>Attributes:</p> Name Type Description <code>organization</code> <code> varchar(24) </code> <p>Abbreviated organization name.</p> <code>org_name</code> <code> varchar(255) </code> <p>Full organization name.</p> <code>org_address</code> <code> varchar(512), optional </code> <p>Address of the organization.</p> <code>org_comment</code> <code> varchar(1024), optional </code> <p>Additional notes on the organization.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Organization(dj.Manual):\n\"\"\"Top-level list of all organizations involved in any of the projects.\n\n    Attributes:\n        organization ( varchar(24) ): Abbreviated organization name.\n        org_name ( varchar(255) ): Full organization name.\n        org_address ( varchar(512), optional ): Address of the organization.\n        org_comment ( varchar(1024), optional ): Additional notes on the organization.\n    \"\"\"\n\n    definition = \"\"\"# Top-level list of all organizations involved in any of the projects\n    organization      : varchar(24)   # Abbreviated organization name\n    ---\n    org_name          : varchar(255)  # Full organization name\n    org_address=''    : varchar(512)  # Address of the organization\n    org_comment=''    : varchar(1024) # Additional notes on the organization\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Lab", "title": "<code>Lab</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Table for storing general lab info.</p> <p>Attributes:</p> Name Type Description <code>lab</code> <code> varchar(24) </code> <p>Abbreviated lab name.</p> <code>lab_name</code> <code> varchar(255) </code> <p>Full lab name.</p> <code>address</code> <code> varchar(255) </code> <p>Physical lab address.</p> <code>time_zone</code> <code> varchar(64) </code> <p>'UTC\u00b1X' format or timezone, e.g., America/New_York. If using NWB export, use 'UTC\u00b1X' format.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Lab(dj.Lookup):\n\"\"\"Table for storing general lab info.\n\n    Attributes:\n        lab ( varchar(24) ): Abbreviated lab name.\n        lab_name ( varchar(255) ): Full lab name.\n        address ( varchar(255) ): Physical lab address.\n        time_zone ( varchar(64) ): 'UTC\u00b1X' format or timezone, e.g., America/New_York.\n            If using NWB export, use 'UTC\u00b1X' format.\n    \"\"\"\n\n    definition = \"\"\"# Table for storing general lab info.\n    lab             : varchar(24)    # Abbreviated lab name\n    ---\n    lab_name        : varchar(255)   # Full lab name\n    address         : varchar(255)    # Physical lab address\n    time_zone       : varchar(64)    # 'UTC\u00b1X' format or timezone, e.g., America/New_York\n    \"\"\"\n\n    class Organization(dj.Part):\n        definition = \"\"\"\n        -&gt; master\n        -&gt; Organization\n        \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Location", "title": "<code>Location</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Location of research (e.g., animal housing or experimental rigs).</p> <p>Attributes:</p> Name Type Description <code>Lab</code> <code>foreign key</code> <p>Lab key.</p> <code>location</code> <code> varchar(32) </code> <p>Location of a space related to the lab.</p> <code>location_description</code> <code> varchar(255), optional </code> <p>Description of the location.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Location(dj.Lookup):\n\"\"\"Location of research (e.g., animal housing or experimental rigs).\n\n    Attributes:\n        Lab (foreign key): Lab key.\n        location ( varchar(32) ): Location of a space related to the lab.\n        location_description ( varchar(255), optional ): Description of the location.\n    \"\"\"\n\n    definition = \"\"\"# location of research (e.g., animal housing or experimental rigs)\n    -&gt; Lab\n    location                   : varchar(32)   # Location of a space related to the lab\n    ---\n    location_description=''    : varchar(255)  # Description of the location\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.UserRole", "title": "<code>UserRole</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Roles assigned to a user or a job title.</p> <p>Attributes:</p> Name Type Description <code>user_role</code> <code> varchar(24) </code> <p>Role within the lab (e.g., PI, Postdoc, etc.).</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass UserRole(dj.Lookup):\n\"\"\"Roles assigned to a user or a job title.\n\n    Attributes:\n        user_role ( varchar(24) ): Role within the lab (e.g., PI, Postdoc, etc.).\n    \"\"\"\n\n    definition = \"\"\"# Roles assigned to a user or a job title.\n    user_role           : varchar(24) # Role within the lab (e.g., PI, Postdoc, etc.)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.User", "title": "<code>User</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Table for storing user information.</p> <p>Attributes:</p> Name Type Description <code>user</code> <code> varchar(32) </code> <p>User name.</p> <code>user_email</code> <code> varchar(128), optional </code> <p>User email address.</p> <code>user_cellphone</code> <code> varchar(32), optional </code> <p>User cellphone number.</p> <code>user_fullname</code> <code> varchar(64), optional </code> <p>User full name</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass User(dj.Lookup):\n\"\"\"Table for storing user information.\n\n    Attributes:\n        user ( varchar(32) ): User name.\n        user_email ( varchar(128), optional ): User email address.\n        user_cellphone ( varchar(32), optional ): User cellphone number.\n        user_fullname ( varchar(64), optional ): User full name\n    \"\"\"\n\n    definition = \"\"\"# Table for storing user information.\n    user                : varchar(32)  # username, short identifier\n    ---\n    user_email=''       : varchar(128)\n    user_cellphone=''   : varchar(32)\n    user_fullname=''    : varchar(64)  # Full name used to uniquely identify an individual\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.LabMembership", "title": "<code>LabMembership</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Store lab membership information using three lookup tables.</p> <p>Attributes:</p> Name Type Description <code>Lab</code> <code>foreign key</code> <p>Lab key.</p> <code>User</code> <code>foreign key</code> <p>User key.</p> <code>UserRole</code> <code>foreign key</code> <p>Optional. UserRole primary key.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass LabMembership(dj.Lookup):\n\"\"\"Store lab membership information using three lookup tables.\n\n    Attributes:\n        Lab (foreign key): Lab key.\n        User (foreign key): User key.\n        UserRole (foreign key): Optional. UserRole primary key.\n    \"\"\"\n\n    definition = \"\"\"# Store lab membership information using three lookup tables.\n    -&gt; Lab\n    -&gt; User\n    ---\n    -&gt; [nullable] UserRole\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.ProtocolType", "title": "<code>ProtocolType</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Type of protocol or issuing agency.</p> <p>Attributes:</p> Name Type Description <code>protocol_type</code> <code> varchar(32) </code> <p>Protocol types (e.g., IACUC, IRB, etc.).</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass ProtocolType(dj.Lookup):\n\"\"\"Type of protocol or issuing agency.\n\n    Attributes:\n        protocol_type ( varchar(32) ): Protocol types (e.g., IACUC, IRB, etc.).\n    \"\"\"\n\n    definition = \"\"\"# Type of protocol or issuing agency\n    protocol_type           : varchar(32)  # Protocol types (e.g., IACUC, IRB, etc.)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Protocol", "title": "<code>Protocol</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Protocol approved by institutions (e.g. IACUC, IRB), or experimental protocol.</p> <p>Attributes:</p> Name Type Description <code>protocol</code> <code> varchar(36) </code> <p>Protocol identifier.</p> <code>ProtocolType</code> <code>foreign key</code> <p>ProtocolType key.</p> <code>protocol_description(</code> <code>varchar(255), optional</code> <p>Description of the protocol.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Protocol(dj.Lookup):\n\"\"\"Protocol approved by institutions (e.g. IACUC, IRB), or experimental protocol.\n\n    Attributes:\n        protocol ( varchar(36) ): Protocol identifier.\n        ProtocolType (foreign key): ProtocolType key.\n        protocol_description( varchar(255), optional ): Description of the protocol.\n    \"\"\"\n\n    definition = \"\"\"# Protocol approved by institutions (e.g. IACUC, IRB), or experimental protocol.\n    protocol                : varchar(36)   # Protocol identifier.\n    ---\n    -&gt; ProtocolType\n    protocol_description='' : varchar(255)  # Description of the protocol\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Project", "title": "<code>Project</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Projects within a lab.</p> <p>Attributes:</p> Name Type Description <code>project</code> <code> varchar(32) </code> <p>Project identifier.</p> <code>project_description</code> <code> varchar(1024) </code> <p>Description about the project.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Project(dj.Lookup):\n\"\"\"Projects within a lab.\n\n    Attributes:\n        project ( varchar(32) ): Project identifier.\n        project_description ( varchar(1024) ): Description about the project.\n    \"\"\"\n\n    logger.warning(\n        \"lab.Project and related tables will be removed in a future version of\"\n        + \" Element Lab. Please use the project schema.\"\n    )\n\n    definition = \"\"\"\n    project                 : varchar(32)\n    ---\n    project_description=''  : varchar(1024)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectKeywords", "title": "<code>ProjectKeywords</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Project keywords or meta-information.</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key.</p> <code>keyword</code> <code> varchar(32) </code> <p>Descriptive keyword about the project.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass ProjectKeywords(dj.Manual):\n\"\"\"Project keywords or meta-information.\n\n    Attributes:\n        Project (foreign key): Project key.\n        keyword ( varchar(32) ): Descriptive keyword about the project.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    keyword:    varchar(32)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectPublication", "title": "<code>ProjectPublication</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Project's resulting publications.</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key.</p> <code>publication</code> <code> varchar(256) </code> <p>Name of the published paper.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass ProjectPublication(dj.Manual):\n\"\"\"Project's resulting publications.\n\n    Attributes:\n        Project (foreign key): Project key.\n        publication ( varchar(256) ): Name of the published paper.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    publication:    varchar(256)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectSourceCode", "title": "<code>ProjectSourceCode</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>URL to source code for replication.</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key.</p> <code>repository_url</code> <code> varchar(256) </code> <p>URL to the code repository.</p> <code>repository_name</code> <code> varchar(32) </code> <p>Name of the repository.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass ProjectSourceCode(dj.Manual):\n\"\"\"URL to source code for replication.\n\n    Attributes:\n        Project (foreign key): Project key.\n        repository_url ( varchar(256) ): URL to the code repository.\n        repository_name ( varchar(32) ): Name of the repository.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    repository_url     : varchar(256)\n    ---\n    repository_name='' : varchar(32)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.ProjectUser", "title": "<code>ProjectUser</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Users participating in the project.</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key.</p> <code>User</code> <code>foreign key</code> <p>User key.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass ProjectUser(dj.Manual):\n\"\"\"Users participating in the project.\n\n    Attributes:\n        Project (foreign key): Project key.\n        User (foreign key): User key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    -&gt; User\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Source", "title": "<code>Source</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Source or supplier of subject animals.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code> varchar(32) </code> <p>Abbreviated source name.</p> <code>source_name</code> <code> varchar(255) </code> <p>Source name.</p> <code>contact_details</code> <code> varchar(255) </code> <p>Optional. Phone number and/or email.</p> <code>source_description</code> <code> varchar(255) </code> <p>Optional. Description of the source.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Source(dj.Lookup):\n\"\"\"Source or supplier of subject animals.\n\n    Attributes:\n        source ( varchar(32) ): Abbreviated source name.\n        source_name ( varchar(255) ): Source name.\n        contact_details ( varchar(255) ): Optional. Phone number and/or email.\n        source_description ( varchar(255) ): Optional. Description of the source.\n    \"\"\"\n\n    definition = \"\"\"\n    source                : varchar(32)  # abbreviated source name\n    ---\n    source_name           : varchar(255)\n    contact_details=''    : varchar(255)\n    source_description='' : varchar(255)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/lab/#element_lab.lab.Device", "title": "<code>Device</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Devices within the lab.</p> <p>Attributes:</p> Name Type Description <code>device</code> <code> varchar(32) </code> <p>Device short name.</p> <code>modality</code> <code> varchar(64) </code> <p>Modality for which this device is used.</p> <code>description</code> <code> varchar(256) </code> <p>Optional. Description of the device.</p> Source code in <code>element_lab/lab.py</code> <pre><code>@schema\nclass Device(dj.Lookup):\n\"\"\"Devices within the lab.\n\n    Attributes:\n        device ( varchar(32) ): Device short name.\n        modality ( varchar(64) ): Modality for which this device is used.\n        description ( varchar(256) ): Optional. Description of the device.\n    \"\"\"\n\n    definition = \"\"\"\n    device             : varchar(32)\n    ---\n    modality           : varchar(64)\n    description=''     : varchar(256)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/", "title": "project.py", "text": ""}, {"location": "api/element_lab/project/#element_lab.project.activate", "title": "<code>activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server to activate the Element</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>bool</code> <p>when True (default), create schema tables in the database if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>str</code> <p>A string containing the module name or module containing the required dependencies to activate the schema.</p> <code>None</code> <p>Dependencies:</p> Upstream tables <p>Lab: table defining general lab information User: table defining user/personnel/experimenter associated with Project. Protocol: table defining a protocol (e.g., protocol number and title)</p> Source code in <code>element_lab/project.py</code> <pre><code>def activate(\n    schema_name,\n    *,\n    create_schema=True,\n    create_tables=True,\n    linking_module=None,\n):\n\"\"\"Activate this schema\n\n    Args:\n        schema_name (str): schema name on the database server to activate the Element\n        create_schema (bool): when True (default), create schema in the database if it\n            does not yet exist.\n        create_tables (bool): when True (default), create schema tables in the database\n            if they do not yet exist.\n        linking_module (str): A string containing the module name or module containing\n            the required dependencies to activate the schema.\n\n    Dependencies:\n    Upstream tables:\n        Lab: table defining general lab information\n        User: table defining user/personnel/experimenter associated with Project.\n        Protocol: table defining a protocol (e.g., protocol number and title)\n    \"\"\"\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'linking_module' must be a module or module name\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    schema.activate(\n        schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=_linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.Project", "title": "<code>Project</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Top-level grouping of studies and experiments to investigate a scientific question</p> <p>Attributes:</p> Name Type Description <code>project</code> <code> varchar(24) </code> <p>Abbreviated project name</p> <code>project_title</code> <code> varchar(1024) </code> <p>Full project title and/or description</p> <code>project_start_date</code> <code>date</code> <p>The start of the project</p> <code>project_end_date</code> <code>date</code> <p>The end date of the project</p> <code>project_comment</code> <code> varchar(1024)</code> <p>additional notes on the project</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass Project(dj.Manual):\n\"\"\"Top-level grouping of studies and experiments to investigate a scientific question\n\n    Attributes:\n        project ( varchar(24) ): Abbreviated project name\n        project_title ( varchar(1024) ): Full project title and/or description\n        project_start_date (date): The start of the project\n        project_end_date (date, optional): The end date of the project\n        project_comment ( varchar(1024), optional): additional notes on the project\n    \"\"\"\n\n    definition = \"\"\"# Top-level grouping of studies and experiments\n    project               : varchar(24)   # abbreviated project name\n    ---\n    project_title         : varchar(1024) # full project title and/or description\n    project_start_date    : date          # the start of the project\n    project_end_date=NULL : date          # the end date of the project\n    project_comment=''    : varchar(1024) # additional notes on the project\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.ProjectPersonnel", "title": "<code>ProjectPersonnel</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>List of individuals involved in a project</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key</p> <code>User</code> <code>foreign key</code> <p>User key</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass ProjectPersonnel(dj.Manual):\n\"\"\"List of individuals involved in a project\n\n    Attributes:\n        Project (foreign key): Project key\n        User (foreign key): User key\n    \"\"\"\n\n    definition = \"\"\"# List of individuals involved in a project\n    -&gt; Project\n    -&gt; User\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.ProjectKeywords", "title": "<code>ProjectKeywords</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Project keywords. If the dataset is exported, this metadata is saved within the NWB file.</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key</p> <code>keyword</code> <code> varchar(32) </code> <p>Keywords describing the project</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass ProjectKeywords(dj.Manual):\n\"\"\"Project keywords. If the dataset is exported, this metadata is saved within the NWB file.\n\n    Attributes:\n        Project (foreign key): Project key\n        keyword ( varchar(32) ): Keywords describing the project\n    \"\"\"\n\n    definition = \"\"\"\n    # Project keywords. If the dataset is exported, this metadata is saved within the NWB file.\n    -&gt; Project\n    keyword: varchar(32) # Keywords describing the project\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.ProjectPublication", "title": "<code>ProjectPublication</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Project's resulting publications</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key</p> <code>publication</code> <code> varchar(255) </code> <p>Publication name or citation</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass ProjectPublication(dj.Manual):\n\"\"\"Project's resulting publications\n\n    Attributes:\n        Project (foreign key): Project key\n        publication ( varchar(255) ): Publication name or citation\n    \"\"\"\n\n    definition = \"\"\"\n    # Project's resulting publications\n    -&gt; Project\n    publication: varchar(255)  # Publication name or citation\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.ProjectSourceCode", "title": "<code>ProjectSourceCode</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Web address of source code</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key</p> <code>repository_url</code> <code> varchar(255) </code> <p>Link to code repository</p> <code>repository_name</code> <code> varchar(32)</code> <p>Name of code repository</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass ProjectSourceCode(dj.Manual):\n\"\"\"Web address of source code\n\n    Attributes:\n        Project (foreign key): Project key\n        repository_url ( varchar(255) ): Link to code repository\n        repository_name ( varchar(32), optional): Name of code repository\n    \"\"\"\n\n    definition = \"\"\"# Web address of source code\n    -&gt; Project\n    repository_url     : varchar(255)  # Link to code repository\n\n    ---\n    repository_name='' : varchar(32)   # Name of code repository\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.Study", "title": "<code>Study</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>A set of experiments designed to address a specific aim</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Project key</p> <code>study</code> <code> varchar(24) </code> <p>Abbreviated study name, e.g., 'Aim 1'</p> <code>study_name</code> <code> varchar(128) </code> <p>Full study name, e.g., 'perceptual response tasks'</p> <code>study_description</code> <code> varchar(1024), optional </code> <p>Description of study goals, objectives, and/or methods</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass Study(dj.Manual):\n\"\"\"A set of experiments designed to address a specific aim\n\n    Attributes:\n        Project (foreign key): Project key\n        study ( varchar(24) ): Abbreviated study name, e.g., 'Aim 1'\n        study_name ( varchar(128) ): Full study name, e.g., 'perceptual response tasks'\n        study_description ( varchar(1024), optional ): Description of study goals,\n            objectives, and/or methods\n    \"\"\"\n\n    definition = \"\"\"# A set of experiments designed to address a specific aim\n    -&gt; Project\n    study                : varchar(24)    # Abbreviated study name, e.g., 'Aim 1'\n    ---\n    study_name           : varchar(128)   # Full name, e.g., 'perceptual response tasks'\n    study_description='' : varchar(1024)  # Description of study goals, objectives, and/or methods\n    \"\"\"\n\n    class Protocol(dj.Part):\n\"\"\"Info about institutional approval (e.g., IACUC, IRB, etc.)\n\n        Attributes:\n            Study (foreign key): Study key\n            Protocol (foreign key): Protocol key\n        \"\"\"\n\n        definition = \"\"\"# Info about institutional approval (e.g., IACUC, IRB, etc.)\n        -&gt; master\n        -&gt; Protocol\n        \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.Study.Protocol", "title": "<code>Protocol</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Info about institutional approval (e.g., IACUC, IRB, etc.)</p> <p>Attributes:</p> Name Type Description <code>Study</code> <code>foreign key</code> <p>Study key</p> <code>Protocol</code> <code>foreign key</code> <p>Protocol key</p> Source code in <code>element_lab/project.py</code> <pre><code>class Protocol(dj.Part):\n\"\"\"Info about institutional approval (e.g., IACUC, IRB, etc.)\n\n    Attributes:\n        Study (foreign key): Study key\n        Protocol (foreign key): Protocol key\n    \"\"\"\n\n    definition = \"\"\"# Info about institutional approval (e.g., IACUC, IRB, etc.)\n    -&gt; master\n    -&gt; Protocol\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/project/#element_lab.project.Experiment", "title": "<code>Experiment</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Experimental tasks and their associated lab, study, and protocol</p> <p>Attributes:</p> Name Type Description <code>experiment</code> <code> varchar(24) </code> <p>Abbreviated experiment name</p> <code>experiment_name</code> <code> varchar(128)</code> <p>Experiment full name or identifier</p> <code>experiment_description</code> <code> varchar(1024)</code> <p>Description of the experiment's focus</p> <code>Study</code> <code>foreign key</code> <p>Study key</p> <code>Lab</code> <code>foreign key</code> <p>Lab key</p> <code>Protocol</code> <code>foreign key</code> <p>Protocol key</p> Source code in <code>element_lab/project.py</code> <pre><code>@schema\nclass Experiment(dj.Manual):\n\"\"\"Experimental tasks and their associated lab, study, and protocol\n\n    Attributes:\n        experiment ( varchar(24) ): Abbreviated experiment name\n        experiment_name ( varchar(128), optional): Experiment full name or identifier\n        experiment_description ( varchar(1024), optional): Description of the\n            experiment's focus\n        Study (foreign key): Study key\n        Lab (foreign key): Lab key\n        Protocol (foreign key, optional): Protocol key\n    \"\"\"\n\n    definition = \"\"\"# Experimental tasks and their associated lab, study, and protocol\n    experiment                : varchar(24)   # Abbreviated experiment name\n    ---\n    experiment_name=''        : varchar(128)  # Experiment full name or identifier\n    experiment_description='' : varchar(1024) # Description of the experiment's focus\n    -&gt; Study\n    -&gt; Lab\n    -&gt; [nullable] Protocol\n    \"\"\"\n</code></pre>"}, {"location": "api/element_lab/version/", "title": "version.py", "text": "<p>Package metadata.</p>"}, {"location": "api/element_lab/export/nwb/", "title": "nwb.py", "text": ""}, {"location": "api/element_lab/export/nwb/#element_lab.export.nwb.element_lab_to_nwb_dict", "title": "<code>element_lab_to_nwb_dict(lab_key=None, project_key=None, protocol_key=None)</code>", "text": "<p>Generate a NWB-compliant dictionary object for lab metadata</p> <p>Generate a dictionary object containing all relevant lab information used    when generating an NWB file at the session level.    All parameters optional, but should only specify one of respective type.</p> <p>Parameters:</p> Name Type Description Default <code>lab_key</code> <code>dict</code> <p>Key specifying one entry in element_lab.lab.Lab</p> <code>None</code> <code>project_key</code> <code>dict</code> <p>Key specifying one entry in element_lab.lab.Project</p> <code>None</code> <code>protocol_key</code> <code>dict</code> <p>Key specifying one entry in element_lab.lab.Protocol</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary with NWB parameters.</p> Source code in <code>element_lab/export/nwb.py</code> <pre><code>def element_lab_to_nwb_dict(\n    lab_key: dict = None, project_key: dict = None, protocol_key: dict = None\n) -&gt; dict:\n\"\"\"Generate a NWB-compliant dictionary object for lab metadata\n\n    Generate a dictionary object containing all relevant lab information used\n       when generating an NWB file at the session level.\n       All parameters optional, but should only specify one of respective type.\n\n    Args:\n        lab_key (dict, optional): Key specifying one entry in element_lab.lab.Lab\n        project_key (dict, optional): Key specifying one entry in element_lab.lab.Project\n        protocol_key (dict, optional): Key specifying one entry in element_lab.lab.Protocol\n\n    Returns:\n        dict: Dictionary with NWB parameters.\n    \"\"\"\n    # Validate input\n    assert any([lab_key, project_key, protocol_key]), \"Must specify one key.\"\n    assert (\n        lab_key is None or len(lab.Lab &amp; lab_key) == 1\n    ), \"Multiple labs error! The lab_key should specify only one lab.\"\n    assert (\n        project_key is None\n        or len(lab.Project &amp; project_key) == 1\n        or len(project.Project &amp; project_key) == 1\n    ), \"Multiple projects error! The project_key should specify only one project.\"\n    assert (\n        protocol_key is None or len(lab.Protocol &amp; protocol_key) == 1\n    ), \"Multiple protocols error! The protocol_key should specify only one protocol.\"\n\n    element_info = dict()\n    if lab_key:\n        element_info.update(_lab_to_nwb_dict(lab_key))\n    if project_key:\n        element_info.update(_project_to_nwb_dict(project_key))\n    if protocol_key:\n        element_info.update(_protocol_to_nwb_dict(protocol_key))\n\n    return element_info\n</code></pre>"}]}